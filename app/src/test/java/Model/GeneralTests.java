/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package Model;

import Pieces.ChessPiece;
import Pieces.ColorOfPiece;
import Pieces.WhitePawn;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;

public class GeneralTests {
    private ChessModelBoard board;

    @BeforeEach
    public void init() {
        board = new ChessModelBoard();
        board.initPieces();
    }

    @Test
    public void testFirstPawnMovePossibilities() {
        List<ChessModelSquare> expectedMoves = new ArrayList<>();
        expectedMoves.add(board.getChessModelSquare(0, 5));
        expectedMoves.add(board.getChessModelSquare(0, 4));
        List<ChessModelSquare> moves = board.getLegalPossibleMoves(board.getChessModelSquare(0, 6));
        assertEquals(2, moves.size());
        assertTrue(moves.contains(expectedMoves.get(0)));
        assertTrue(moves.contains(expectedMoves.get(1)));
    }

    @Test
    public void testEnPassantMove() {
        board.makeMove(board.getChessModelSquare(0, 6), board.getChessModelSquare(0, 4), ColorOfPiece.WHITE);
        board.makeMove(board.getChessModelSquare(6, 1), board.getChessModelSquare(6, 3), ColorOfPiece.BLACK);
        board.makeMove(board.getChessModelSquare(0, 4), board.getChessModelSquare(0, 3), ColorOfPiece.WHITE);
        board.makeMove(board.getChessModelSquare(1, 1), board.getChessModelSquare(1, 3), ColorOfPiece.BLACK);
        List<ChessModelSquare> moves = board.getLegalPossibleMoves(board.getChessModelSquare(0, 3));
        List<ChessModelSquare> expectedMoves = new ArrayList<>();
        expectedMoves.add(board.getChessModelSquare(0, 2));
        expectedMoves.add(board.getChessModelSquare(1, 2));
        assertEquals(2, moves.size());
        assertTrue(moves.contains(expectedMoves.get(0)));
        assertTrue(moves.contains(expectedMoves.get(1)));
        board.makeMove(board.getChessModelSquare(0, 3), board.getChessModelSquare(1, 2), ColorOfPiece.WHITE);
        ChessPiece piece = board.getChessModelSquare(1, 3).getPiece();
        assertNull(piece);
        piece = board.getChessModelSquare(1, 2).getPiece();
        assertTrue(piece instanceof WhitePawn);
    }

    @Test
    public void testQuickestCheckMate() {
        board.makeMove(board.getChessModelSquare(5, 6), board.getChessModelSquare(5, 4), ColorOfPiece.WHITE);
        board.makeMove(board.getChessModelSquare(4, 1), board.getChessModelSquare(4, 3), ColorOfPiece.BLACK);
        board.makeMove(board.getChessModelSquare(6, 6), board.getChessModelSquare(6, 4), ColorOfPiece.WHITE);
        board.makeMove(board.getChessModelSquare(3, 0), board.getChessModelSquare(7, 4), ColorOfPiece.BLACK);
        assertTrue(board.isKingUnderCheck());
        assertTrue(board.hasGameFinished());
    }

    @Test
    public void testKnightMoves() {
        board.makeMove(board.getChessModelSquare(1, 7), board.getChessModelSquare(2, 5), ColorOfPiece.WHITE);
        board.makeMove(board.getChessModelSquare(1, 0), board.getChessModelSquare(2, 2), ColorOfPiece.BLACK);
        board.makeMove(board.getChessModelSquare(2, 5), board.getChessModelSquare(3, 3), ColorOfPiece.WHITE);
        board.makeMove(board.getChessModelSquare(2, 2), board.getChessModelSquare(3, 4), ColorOfPiece.BLACK);
        testAll8PossibleMovesAroundTheKnight(3, 3);
        testAll8PossibleMovesAroundTheKnight(3, 4);
        board.makeMove(board.getChessModelSquare(3, 3), board.getChessModelSquare(2, 1), ColorOfPiece.WHITE);
        assertTrue(board.isKingUnderCheck());
        board.makeMove(board.getChessModelSquare(3, 0), board.getChessModelSquare(2, 1), ColorOfPiece.BLACK);
        assertFalse(board.isKingUnderCheck());
        //dummy move
        board.makeMove(board.getChessModelSquare(7, 6), board.getChessModelSquare(7, 5), ColorOfPiece.WHITE);
        board.makeMove(board.getChessModelSquare(3, 4), board.getChessModelSquare(2, 6), ColorOfPiece.BLACK);
        assertTrue(board.isKingUnderCheck());
        board.makeMove(board.getChessModelSquare(3, 7), board.getChessModelSquare(2, 6), ColorOfPiece.WHITE);
        assertFalse(board.isKingUnderCheck());
    }

    //BE CAREFUL, FUNC IS NOT BORDER SAFE NOR SAME COLOR PIECE SAFE
    //MAKE SURE THAT KNIGHT ACTUALLY SHOULD HAVE ALL 8 MOVES AROUND HIM
    private void testAll8PossibleMovesAroundTheKnight(int col, int row) {
        List<ChessModelSquare> allExpectedMovesForKnight = new ArrayList<>();
        //left side
        allExpectedMovesForKnight.add(board.getChessModelSquare(col - 1, row - 2));
        allExpectedMovesForKnight.add(board.getChessModelSquare(col - 1, row + 2));
        allExpectedMovesForKnight.add(board.getChessModelSquare(col - 2, row - 1));
        allExpectedMovesForKnight.add(board.getChessModelSquare(col - 2, row + 1));
        //right side
        allExpectedMovesForKnight.add(board.getChessModelSquare(col + 1, row - 2));
        allExpectedMovesForKnight.add(board.getChessModelSquare(col + 1, row + 2));
        allExpectedMovesForKnight.add(board.getChessModelSquare(col + 2, row - 1));
        allExpectedMovesForKnight.add(board.getChessModelSquare(col + 2, row + 1));

        ChessModelSquare knightSquare = board.getChessModelSquare(col, row);
        assertTrue(board.isPieceKnight(knightSquare));

        List<ChessModelSquare> actualMoves = board.getLegalPossibleMoves(knightSquare);
        assertEquals(8, actualMoves.size());

        for (ChessModelSquare expectedSquare : allExpectedMovesForKnight) {
            assertTrue(actualMoves.contains(expectedSquare));
        }
    }

    @Test
    public void testIsQueenFunction() {
        assertTrue(board.isPieceQueen(board.getChessModelSquare(3, 7)));
        assertTrue(board.isPieceQueen(board.getChessModelSquare(3, 0)));
    }

    @Test
    public void testIsKnightFunction() {
        assertTrue(board.isPieceKnight(board.getChessModelSquare(1, 7)));
        assertTrue(board.isPieceKnight(board.getChessModelSquare(6, 7)));
        assertTrue(board.isPieceKnight(board.getChessModelSquare(1, 0)));
        assertTrue(board.isPieceKnight(board.getChessModelSquare(6, 0)));
    }

    @Test
    public void testIsBishopFunction() {
        assertTrue(board.isPieceBishop(board.getChessModelSquare(2, 7)));
        assertTrue(board.isPieceBishop(board.getChessModelSquare(5, 7)));
        assertTrue(board.isPieceBishop(board.getChessModelSquare(2, 0)));
        assertTrue(board.isPieceBishop(board.getChessModelSquare(5, 0)));
    }
}
